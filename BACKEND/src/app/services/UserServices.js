import prisma from "../utils/prisma.js";
import { passwordHash, passwordCompareHash } from "../utils/bcryptPass.js";
import InsertDataService from "../services/InsertDataService.js";

class UserService {
    async create(data) {
        const { email, password } = data;

        console.log("Email recebido:", email);
        console.log("Senha recebida:", password);

        if (!email || !password) {
            throw new Error("Email e senha s√£o obrigat√≥rios!");
        }

        try {
            const existingUser = await prisma.user.findUnique({
                where: { email },
            });

            if (existingUser) {
                throw new Error("Este email j√° existe");
            }
            const newEmail = email ? email.toLowerCase() : "";
            const passwordBlock = await passwordHash(password);

            // Criar usu√°rio
            const newUser = await prisma.user.create({
                data: {
                    email: newEmail,
                    password: passwordBlock,
                },
            });

            // Verificar se √© o primeiro usu√°rio criado
            const userCount = await prisma.user.count();
            if (userCount === 1) {
                console.log("Chamando InsertDatas...");
                await InsertDataService.InsertDatas();
                console.log("Dados padr√£o inseridos com sucesso!");
            }

            return newUser;
        } catch (error) {
            throw new Error(
                "‚ö†Ô∏è Erro ao tentar criar usu√°rio: " + error.message
            );
        }
    }

    async list() {
        try {
            const users = await prisma.user.findMany();
            return users;
        } catch (error) {
            console.error("‚ùå Erro ao listar users:", error);
            throw new Error(`‚ö†Ô∏è Erro ao listar users : ${error.message}`);
        }
    }

    async listEmail(email) {
        try {
            const user = await prisma.user.findFirst({
                where: { email },
                select: { id: true },
            });

            if (!user) {
                throw new Error("Usu√°rio n√£o encontrado!");
            }

            console.log("üîç ID do usu√°rio encontrado:", user.id);
            return user;
        } catch (error) {
            console.error("‚ùå Erro ao listar user por email:", error);
            throw new Error(
                `‚ö†Ô∏è Erro ao listar user por email: ${error.message}`
            );
        }
    }

    async updatePassword(data) {
        const { email, password, newPassword } = data;

        try {
            const user = await prisma.user.findUnique({
                where: { email },
            });

            if (!user) {
                throw new Error(
                    "‚ö†Ô∏è Esse E-mail N√ÉO existe, tente seu E-mail cadastrado!!"
                );
            }

            if (!newPassword) {
                throw new Error("‚ö†Ô∏è A nova senha √© obrigat√≥ria!");
            }

            const isPasswordValid = await passwordCompareHash(
                password,
                user.password
            );

            if (!isPasswordValid) {
                throw new Error("‚ö†Ô∏è Senha atual incorreta!");
            }

            const newPasswordHash = await passwordHash(newPassword);

            await prisma.user.update({
                where: { email },
                data: { password: newPasswordHash },
            });

            return { message: "Senha alterada com sucesso!" };
        } catch (error) {
            throw new Error(
                "‚ö†Ô∏è Erro ao alterar senha do usu√°rio: " + error.message
            );
        }
    }

    async updateEmail(data) {
        const { email, newEmail } = data;
        try {
            const emailExistente = await prisma.user.findUnique({
                where: { email },
            });

            const newEmailExistente = await prisma.user.findUnique({
                where: { email: newEmail },
            });

            if (!emailExistente) {
                throw new Error(
                    "‚ö†Ô∏è Esse E-mail N√ÉO existe, tente seu E-mail cadastrado!!"
                );
            }

            if (!newEmail) {
                throw new Error("‚ö†Ô∏è O novo e-mail √© obrigat√≥rio!");
            }

            if (newEmailExistente) {
                throw new Error(
                    "‚ö†Ô∏è Esse E-mail j√° FOI cadastrado, tente um E-mail n√£o cadastrado!!"
                );
            }

            await prisma.user.update({
                where: { email },
                data: { email: newEmail },
            });

            return { message: "E-mail alterado com sucesso!" };
        } catch (error) {
            throw new Error(
                "‚ö†Ô∏è Erro ao alterar E-MAIL do usu√°rio: " + error.message
            );
        }
    }

    async destroy(id) {
        try {
            await prisma.user.delete({
                where: { id },
            });
            // return { message: "Usu√°rio deletado com sucesso!" };
        } catch (error) {
            throw new Error("‚ö†Ô∏è Erro ao deletar usu√°rio: " + error.message);
        }
    }
}

export default new UserService();
